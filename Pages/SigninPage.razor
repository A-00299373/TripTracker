@page "/signin"
@layout AuthLayout 

@inject NavigationManager NavigationManager

@inject AuthService AuthService
@inject MauiInterop Maui

    <EditForm Model="_model" OnValidSubmit="SigninAsync">

        <DataAnnotationsValidator/> 
        <div class="card border-0 shadow-sm">
            <div class="card-body text-center">
                <h4>Welcome back</h4>
                <p class="text-muted">Sign-in to your TripTracker account</p>
                <div class="vstack text-start">
                    <div class="mb-3">
                        <label class="form-label">Username</label>
                        <InputText @bind-Value="_model.Username" placeholder="Enter Username" class="form-control rounded-pill fs-6" />
                        <ValidationMessage For="() => _model.Username" />
                    </div>
                    <div class="mb-3">
                        <label class="form-label">Password</label>
                        <InputText @bind-Value="_model.Password" type="password" placeholder="Enter Password" class="form-control rounded-pill fs-6" />
                        <ValidationMessage For="() => _model.Password" />
                    </div>
                    <button type="submit" class="btn btn-primary rounded-pill">Sign-In</button>
                </div>
            </div>
        </div>
    </EditForm>
<p class="text-end mt-3">New to TripTracker? <NavLink href="/signup">Sign Up</NavLink></p>

@code {
    private SigninModel _model = new();

    private async Task SigninAsync()
    {
        Maui.ShowLoader();
        try
        {
            await Task.Delay(5000);
            var result = await AuthService.SigninAsync(_model);
            if (result.IsSuccess)
            {
                //Redierct user to home page
                NavigationManager.NavigateTo("/home", replace: true);
            }
            else
            {
                //Show error alert
                await Maui.ShowErrorAlertAsync(result.Error ?? "Error in signing in");
            }
        }
        catch(Exception ex)
        {
            await Maui.ShowErrorAlertAsync(ex.Message);
        }
        finally
        {
            Maui.HideLoader();
        }

    }
}


