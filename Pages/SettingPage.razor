@page "/settings"

@inject NavigationManager NavigationManager

@inject MauiInterop Maui
@inject AppState AppState
@inject AuthService Auth

<div class="container p-3">
    <div class="d-flex flex-column justify-content-center align-items-center h-remaining">
        <label class="rounded-circle text-uppercase bg-success bg-gradient text-white text-center fw-bold shadow-lg avatar">
            @Auth.CurrentUser.Name?[0]
        </label>
        <div class="flex-grow-1 my-3 py-2 w-100 d-flex align-items-center">
            <ul class="list-group list-group-flush w-100">
                <li class="list-group-item" @onclick="ChangeNameAsync">
                    <div class="hstack gap-3">
                        <i class="bx bx-sm bx-user"></i>
                        <label>My Profile</label>
                    </div>
                </li>
                <li class="list-group-item" @onclick="ChangePasswordAsync">
                    <div class="hstack gap-3">
                        <i class="bx bx-sm bx-lock"></i>
                        <label>Change Password</label>
                    </div>
                </li>
                <li class="list-group-item" @onclick="GoToManageExpenseCategoriesPage">
                    <div class="hstack gap-3">
                        <i class="bx bx-sm bx-grid"></i>
                        <label>Manage Expense Categroies</label>
                    </div>
                </li>
                @* <li class="list-group-item">
                    <div class="hstack gap-3">
                        <label class="text-bold">
                            Made by A00280655 & A00299373
                        </label>
                    </div>
                </li> *@
            </ul>
        </div>
        <label class="bg-danger rounded-pill py-1 px-3 text-white m-0 d-flex align-items-center" @onclick="Signout">
            <i class="bx bx-log-out m-0 p-0 me-2"></i>
            <span>Signout</span>
        </label>
    </div>
</div>
@code {
    protected override async Task OnInitializedAsync()
    {
        AppState.SetSelectedMenuItem(AppConstants.MenuItems.Settings);
                AppState.AddTabbarItems(new TabbarItem("bx-sm bx-info-circle", () => Maui.OpenInLauncher("https://github.com/A-00299373")));
    }

    private void Signout()
    {
        Auth.SignOut();
        NavigationManager.NavigateTo("/signin", replace: true);
    }

    private async Task ChangeNameAsync()
    {
        var newName = await Maui.ShowPromptAsync("Your Name", "Enter your name", "Save", Auth.CurrentUser.Name);
        if (!string.IsNullOrWhiteSpace(newName))
        {
            Maui.ShowLoader();
            await Auth.ChnageNameAsync(newName);
            Maui.HideLoader();
        }
    }

    private async Task ChangePasswordAsync()
    {
        var newPassword = await Maui.ShowPromptAsync("Change Password", "Enter new password", "Save New Password", string.Empty);
        if (!string.IsNullOrWhiteSpace(newPassword))
        {
            Maui.ShowLoader();
            await Auth.ChangePasswordAsync(newPassword);
            Maui.HideLoader();
        }
    }

    private void GoToManageExpenseCategoriesPage() => NavigationManager.GoToInnerPage("manage-expense-categories");
}

<style type="text/css" scoped>
    .h-remaining{
        height: calc(100vh - var(--navbar-height) - 100px);
    }

    .avatar {
        height: 80;
        width: 80px;
        font-size: 50px;
}
</style>
